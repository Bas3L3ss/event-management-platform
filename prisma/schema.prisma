// prisma/schema.prisma

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}
generator client {
  provider = "prisma-client-js"
}


model User {
  id               String         @id @default(uuid())
  clerkId          String         @unique
  userName         String
  userEmail String @unique
  userPhone String @default("")
  userBiography    String   @default("")
  userAvatar       String
  accountCreatedAt DateTime       @default(now())
  updatedAt DateTime @updatedAt
   deletedAt        DateTime?
  isAuthorizedUser Boolean        @default(false)
  followers        String[]       @default([])
  followedByUsers  String[]       @default([])

  notifications    Notification[] @relation("UserNotifications") // Back-relation

  @@index([accountCreatedAt])
}
model Notification {
  id                     String   @id @default(uuid())
  clerkId                String
  eventId                String
  userAvatar             String
  userName               String
  description            String
  title                  String
  notificationCreatedAt  DateTime @default(now())
  seenStatus Boolean @default(false)
  userId                 String

  user                   User     @relation("UserNotifications", fields: [userId], references: [id] ,onDelete: Cascade)
  event     Event    @relation("EventNotifications", fields: [eventId], references: [id], onDelete: Cascade)

  @@index([notificationCreatedAt])
}
model Event {
  id               String     @id @default(uuid())
  clerkId          String 
  eventName        String @unique
  eventDescription String
  dateEnd        DateTime 
  dateStart DateTime
  status           EventStatus @default(NOT_CONFIRMED)
  type EventType
  rating           Float @default(0)
  eventImg         String[] @default([]) 
  eventVideo String?
  eventImgOrVideoFirstDisplay String?
  eventTicketPrice Float
 
  eventLocation String 
  latitude Float?
  longitude Float?

  reservationTicketLink String @default("") 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activationTotal Int @default(0)

  featured         Boolean     @default(false)
  orders           Order[]    @relation("EventOrders")
  notifications    Notification[] @relation("EventNotifications")
  comments         Comment[]   @relation("EventComments")
  hostName         String?

@@index([dateStart, dateEnd])
}


model Comment {
  id              String   @id @default(uuid())
  clerkId         String    
  authorName      String
  authorImageUrl  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  commentText     String
  rating          Float?
  event           Event    @relation("EventComments", fields: [eventId], references: [id], onDelete: Cascade)
  parentCommentId String?   
  eventId         String  
  isEdited Boolean @default(false)

  @@index([createdAt]) 
}
model CommentLike {
  id              String   @id @default(uuid())
  clerkId         String
  commentId       String
  disLike         Boolean?  
  @@unique([clerkId, commentId]) 
  
}



model Order {
  id        String   @id @default(uuid())
  clerkId   String
  eventId String  @unique
  eventName String
  orderTotal Int      @default(0)
  email     String
  tax Int @default(0)
  isPaid    Boolean  @default(false)
  createdAt DateTime @default(now())
  PaidAt DateTime? 
  updatedAt DateTime @updatedAt

   event     Event    @relation("EventOrders", fields: [eventId], references: [id], onDelete: Cascade)
}

enum EventStatus {
  NOT_CONFIRMED
  UPCOMING
  STARTED
  ENDED
}


enum EventType {
  CONFERENCE
  SEMINARS_WORKSHOPS
  SPORTS
  WEDDINGS_CELEBRATION
  FASHION
  CONCERTS
  MEETINGS
  FESTIVALS
  TRADE_SHOWS_EXPOS
  FUNDRAISERS_CHARITY
  NETWORKING
  PRODUCT_LAUNCHES
  CORPORATE_RETREATS
}